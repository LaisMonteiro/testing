# Azure DevOps Pipeline para Flutter Proxy Server
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    exclude:
      - README.md
      - docs/*

pr:
  branches:
    include:
      - main
      - develop

variables:
  # Build Variables
  buildConfiguration: 'Release'
  nodeVersion: '18.x'
  
  # Azure Container Registry
  containerRegistry: 'your-acr-name.azurecr.io'
  repository: 'flutter-proxy-server'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Application Variables
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    environmentName: 'production'
    serviceName: 'flutter-proxy-prod'
  ${{ elseif eq(variables['Build.SourceBranchName'], 'develop') }}:
    environmentName: 'staging'
    serviceName: 'flutter-proxy-staging'
  ${{ else }}:
    environmentName: 'development'
    serviceName: 'flutter-proxy-dev'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test Job'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: self
      fetchDepth: 0
    
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)
    
    - task: Cache@2
      displayName: 'Cache node_modules'
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
          npm
        path: '$(System.DefaultWorkingDirectory)/node_modules'
    
    - script: |
        npm ci
      displayName: 'Install dependencies'
    
    - script: |
        npm run lint
      displayName: 'Run ESLint'
      continueOnError: true
    
    - script: |
        npm run build
      displayName: 'Build TypeScript'
    
    - script: |
        npm test
      displayName: 'Run Tests'
      continueOnError: true
    
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-results.xml'
        testRunTitle: 'Node.js Tests'
    
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '**/coverage/cobertura-coverage.xml'
        reportDirectory: '**/coverage'
    
    - task: CopyFiles@2
      displayName: 'Copy build artifacts'
      inputs:
        contents: |
          dist/**
          package.json
          package-lock.json
          Dockerfile
          .dockerignore
          .env.example
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'

- stage: SecurityScan
  displayName: 'Security Scan'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: SecurityScan
    displayName: 'Security Vulnerability Scan'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: self
    
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)
    
    - script: |
        npm ci
      displayName: 'Install dependencies'
    
    - script: |
        npm audit --audit-level moderate
      displayName: 'NPM Security Audit'
      continueOnError: true
    
    - task: WhiteSource@21
      displayName: 'WhiteSource Security Scan'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        cwd: '$(System.DefaultWorkingDirectory)'

- stage: DockerBuild
  displayName: 'Docker Build and Push'
  dependsOn: 
    - Build
    - SecurityScan
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: DockerBuild
    displayName: 'Build and Push Docker Image'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: self
    
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        repository: $(repository)
        dockerfile: $(dockerfilePath)
        buildContext: '$(System.ArtifactsDirectory)/drop'
        tags: |
          $(tag)
          latest
    
    - task: Docker@2
      displayName: 'Push Docker Image'
      inputs:
        command: 'push'
        repository: $(repository)
        containerRegistry: $(containerRegistry)
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: 'Deploy to $(environmentName)'
  dependsOn: DockerBuild
  condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'develop')))
  jobs:
  - deployment: DeployToAzure
    displayName: 'Deploy to Azure Container Instances'
    environment: $(environmentName)
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureCLI@2
            displayName: 'Deploy to Azure Container Instances'
            inputs:
              azureSubscription: 'your-azure-subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create resource group if it doesn't exist
                az group create --name rg-flutter-proxy-$(environmentName) --location eastus2
                
                # Deploy container instance
                az container create \
                  --resource-group rg-flutter-proxy-$(environmentName) \
                  --name $(serviceName) \
                  --image $(containerRegistry)/$(repository):$(tag) \
                  --registry-login-server $(containerRegistry) \
                  --registry-username $(ACR_USERNAME) \
                  --registry-password $(ACR_PASSWORD) \
                  --dns-name-label flutter-proxy-$(environmentName)-$(Build.BuildId) \
                  --ports 3000 \
                  --environment-variables \
                    NODE_ENV=$(environmentName) \
                    PORT=3000 \
                  --secure-environment-variables \
                    SESSION_SECRET=$(SESSION_SECRET) \
                    JWT_SECRET=$(JWT_SECRET) \
                  --cpu 1 \
                  --memory 2
          
          - task: AzureCLI@2
            displayName: 'Get Container IP'
            inputs:
              azureSubscription: 'your-azure-subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                CONTAINER_IP=$(az container show \
                  --resource-group rg-flutter-proxy-$(environmentName) \
                  --name $(serviceName) \
                  --query ipAddress.fqdn \
                  --output tsv)
                
                echo "##vso[task.setvariable variable=containerUrl]http://$CONTAINER_IP:3000"
                echo "Container deployed at: http://$CONTAINER_IP:3000"
          
          - task: PowerShell@2
            displayName: 'Health Check'
            inputs:
              targetType: 'inline'
              script: |
                $maxAttempts = 10
                $attempt = 0
                $healthUrl = "$(containerUrl)/health"
                
                do {
                  $attempt++
                  Write-Host "Health check attempt $attempt of $maxAttempts"
                  
                  try {
                    $response = Invoke-RestMethod -Uri $healthUrl -TimeoutSec 30
                    if ($response.status -eq "healthy") {
                      Write-Host "✅ Health check passed!"
                      exit 0
                    }
                  }
                  catch {
                    Write-Host "❌ Health check failed: $($_.Exception.Message)"
                  }
                  
                  Start-Sleep -Seconds 30
                } while ($attempt -lt $maxAttempts)
                
                Write-Host "❌ Health check failed after $maxAttempts attempts"
                exit 1